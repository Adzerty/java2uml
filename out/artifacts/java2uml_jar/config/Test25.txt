                                                                               
      ,--.  ,---.,--.   ,--.,---.       ,---.     ,--. ,--.,--.   ,--.,--.     
      |  | /  O  \\  `.'  //  O  \     '.-.  \    |  | |  ||   `.'   ||  |     
 ,--. |  ||  .-.  |\     /|  .-.  |     .-' .'    |  | |  ||  |'.'|  ||  |     
 |  '-'  /|  | |  | \   / |  | |  |    /   '-.    '  '-'  '|  |   |  ||  '--.  
  `-----' `--' `--'  `-'  `--' `--'    '-----'     `-----' `--'   `--'`-----'  
                                                                               
+------+
 Test25
+------+

------Date de création : 17/12/2020 14:06
------Auteur : Nicolas
------Proposé par : InnovAction
Liste de caractères utilisés : <> (agrégation) <//> (composition) |> (héritage)

+-----------+
 Utilisation 
+-----------+
Un commentaire s'écrit de cette manière : //

Pour masquer un élément (attribut, méthode...), commentez le
	Exemple : //- int entierA <-- pour masquer UN attribut

	Exemple : //-----Attributs <-- pour masquer TOUS les attributs

Pour ajouter une contrainte sur une association :
	ClasseA ------> ClasseB {contrainte}

Pour ajouter des multiplicités sur une association :
	ClasseA [0..1] ------> [1..*] ClasseB



+------+
 Entité 
+------+
------ Entité : Classe
Coord abstract
----Attribut(s) :
- int col 
- int lig 
- int act 

----Méthode(s) :
# int getCol() _ 
+ int getLig() 

----Association(s) :
Coord -------|> Point



------Fin
