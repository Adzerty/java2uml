                                                                               
      ,--.  ,---.,--.   ,--.,---.       ,---.     ,--. ,--.,--.   ,--.,--.     
      |  | /  O  \\  `.'  //  O  \     '.-.  \    |  | |  ||   `.'   ||  |     
 ,--. |  ||  .-.  |\     /|  .-.  |     .-' .'    |  | |  ||  |'.'|  ||  |     
 |  '-'  /|  | |  | \   / |  | |  |    /   '-.    '  '-'  '|  |   |  ||  '--.  
  `-----' `--' `--'  `-'  `--' `--'    '-----'     `-----' `--'   `--'`-----'  
                                                                               
+---------------+
 testAntoine.txt
+---------------+

------Date de création : 06/01/2021 16:18
------Auteur : antoine
------Proposé par : InnovAction


Liste de caractères utilisés : <> (agrégation), <//> (composition), |> (héritage), (+) (classe interne) 

+-----------+
 Rappels 
+-----------+
Un commentaire s'écrit de cette manière : "//"

Pour masquer un élément (attribut, méthode...), commentez le.
	Exemple : //- int entierA <-- pour masquer UN attribut

	Exemple : //-----Attributs <-- pour masquer TOUS les attributs

Pour ajouter une contrainte sur les associations :
	Association1 Association2 {contrainte}

Pour ajouter des multiplicités sur une association :
	ClasseA [0..1] ------> [1..*] ClasseB

Pour modifier une valeur par défault d'un attribut :
	Exemple : - int entierA static final default = 10 

Pour d'autres renseignements, consultez la documentation



+-------+
 Entités 
+-------+
------ Entité : Classe
Departement
----Attribut(s) :
- Chaine numero 
- Chaine nom 
- entier population 
- entier superficie 
- Chaine[] test [0..*] 

----Méthode(s) :
+ {constructeur} Departement(Chaine numero; Chaine nom; entier population; entier superficie)
+ Chaine toString() 
+ Chaine getNom() 
+ Chaine getNumero() 
+ entier getPopulation() 
+ entier getSuperficie() 
+ réel densite() 

----Association(s) :

----Contrainte(s) :


------ Entité : Classe
Exo1
----Attribut(s) :

----Méthode(s) :
+ {constructeur} Exo1()
+ void main(Chaine[] args) static 

----Association(s) :

----Contrainte(s) :


------ Entité : Classe
Hanoi
----Attribut(s) :
- entier etape 

----Méthode(s) :
+ {constructeur} Hanoi()
+ void main(Chaine[] args) static 
+ void hanoi(entier nbDisque; entier tourDeb; entier tourFin) 

----Association(s) :

----Contrainte(s) :


------ Entité : Interface
TestInterface abstract
----Attribut(s) :

----Méthode(s) :
+ void test() abstract  
+ entier addition() abstract  

----Association(s) :

----Contrainte(s) :


------ Entité : Classe
Train
----Attribut(s) :
- entier MAX_V final 
- entier nbVehicule 

----Méthode(s) :
+ {constructeur} Train()
+ void main(Chaine[] args) static 
+ Chaine toString() 
+ Iterator<Vehicule> iterator() 
+ void test() 
- Chaine setCE(charactère c) 
+ entier addition() 
+ booléen ajouterVehicule(Vehicule v) 
- Chaine colorier(Chaine coul) 
- Chaine setCF(Chaine c) 

----Association(s) :
Train ------- Vehicule
Train ------- Vehicule
Train -.-.-.-|> TestInterface

----Contrainte(s) :


------ Entité : Classe
Vehicule
----Attribut(s) :
- entier nbVehicule static 
- Chaine couleur 
- entier numV 

----Méthode(s) :
+ {constructeur} Vehicule(Chaine couleur)
+ Chaine toString() 
+ Chaine getCouleur() 

----Association(s) :

----Contrainte(s) :



------Fin
